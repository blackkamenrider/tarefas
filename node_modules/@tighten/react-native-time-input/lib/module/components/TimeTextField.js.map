{"version":3,"sources":["TimeTextField.tsx"],"names":["React","useEffect","useState","TextInput","TimeInputHelper","useDebounce","TimeTextField","givenTime","onTimeValueReady","style","time","setTime","state","debouncedTime","setDebouncedState","setDebouncedTime","debounce","validate","cancel","text","mask"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAAqC,cAArC;AACA,OAAO,KAAKC,eAAZ,MAAiC,sBAAjC;AAEA,OAAOC,WAAP,MAAwB,sBAAxB;AAQA,eAAe,SAASC,aAAT,CAAuB;AACpCC,EAAAA,SADoC;AAEpCC,EAAAA,gBAFoC;AAGpCC,EAAAA;AAHoC,CAAvB,EAIqB;AAClC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAS,EAAT,CAAhC;AACA,QAAM;AACJU,IAAAA,KAAK,EAAEC,aADH;AAEJC,IAAAA,iBAAiB,EAAEC,gBAFf;AAGJC,IAAAA;AAHI,MAIFX,WAAW,CAACK,IAAD,EAAO,GAAP,CAJf;AAMAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,SAAL,EAAgB;AAChBI,IAAAA,OAAO,CAACJ,SAAS,CAACG,IAAX,CAAP;AACD,GAHQ,EAGN,CAACH,SAAD,EAAYI,OAAZ,CAHM,CAAT;AAKAV,EAAAA,SAAS,CAAC,MAAY;AACpBO,IAAAA,gBAAgB,CAACJ,eAAe,CAACa,QAAhB,CAAyBJ,aAAzB,CAAD,EAA0CA,aAA1C,CAAhB;AACD,GAFQ,EAEN,CAACA,aAAD,EAAgBL,gBAAhB,CAFM,CAAT;AAIAP,EAAAA,SAAS,CAAC,MAAoB;AAC5Bc,IAAAA,gBAAgB,CAACL,IAAD,CAAhB;AAEA,WAAO,MAAM;AACXM,MAAAA,QAAQ,CAACE,MAAT;AACD,KAFD;AAGD,GANQ,EAMN,CAACF,QAAD,EAAWN,IAAX,EAAiBK,gBAAjB,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAC,YADf;AAEE,IAAA,SAAS,EAAE,CAFb;AAGE,IAAA,YAAY,EAAGI,IAAD,IAAkBR,OAAO,CAACP,eAAe,CAACgB,IAAhB,CAAqBD,IAArB,CAAD,CAHzC;AAIE,IAAA,WAAW,EAAC,OAJd;AAKE,IAAA,KAAK,EAAET,IALT;AAME,IAAA,KAAK,EAAED;AANT,IADF;AAUD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TextInput, TextStyle } from 'react-native';\nimport * as TimeInputHelper from '../helpers/timeInput';\nimport type { TimeParts } from 'src/typing/TimeParts';\nimport useDebounce from '../hooks/useDebounce';\n\ntype TimeTextFieldProps = {\n  style: TextStyle[];\n  onTimeValueReady: Function;\n  givenTime: TimeParts | null;\n};\n\nexport default function TimeTextField({\n  givenTime,\n  onTimeValueReady,\n  style,\n}: TimeTextFieldProps): JSX.Element {\n  const [time, setTime] = useState<string>('');\n  const {\n    state: debouncedTime,\n    setDebouncedState: setDebouncedTime,\n    debounce,\n  } = useDebounce(time, 250);\n\n  useEffect(() => {\n    if (!givenTime) return;\n    setTime(givenTime.time);\n  }, [givenTime, setTime]);\n\n  useEffect((): void => {\n    onTimeValueReady(TimeInputHelper.validate(debouncedTime), debouncedTime);\n  }, [debouncedTime, onTimeValueReady]);\n\n  useEffect((): (() => void) => {\n    setDebouncedTime(time);\n\n    return () => {\n      debounce.cancel();\n    };\n  }, [debounce, time, setDebouncedTime]);\n\n  return (\n    <TextInput\n      keyboardType=\"number-pad\"\n      maxLength={5}\n      onChangeText={(text: string) => setTime(TimeInputHelper.mask(text))}\n      placeholder=\"08:00\"\n      value={time}\n      style={style}\n    />\n  );\n}\n"]}