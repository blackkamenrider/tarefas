{"version":3,"names":["AndroidPickerMode","AndroidTimeInputMode","AndroidDateInputMode","AndroidDatePickerType","ActionType"],"sources":["types.ts"],"sourcesContent":["import type { ViewProps } from 'react-native';\n\nexport enum AndroidPickerMode {\n  DATE = 'date',\n  TIME = 'time',\n}\n\nexport enum AndroidTimeInputMode {\n  DEFAULT = 'default',\n  KEYBOARD = 'keyboard',\n  CLOCK = 'clock',\n}\n\nexport enum AndroidDateInputMode {\n  DEFAULT = 'default',\n  TEXT = 'text',\n  CALENDAR = 'calendar',\n}\n\nexport enum AndroidDatePickerType {\n  DEFAULT = 'default',\n  RANGE = 'range',\n}\n\nexport enum ActionType {\n  SET_DATE,\n  SET_DATE_RANGE,\n  SET_TIME,\n  DISMISSED,\n}\n\ntype BaseProps = Readonly<\n  ViewProps & {\n    /**\n     * The current value of the picker\n     */\n    value: Date;\n    /**\n     * The title to be shown on the top left\n     */\n    titleText?: string;\n    /**\n     * The text used in the positive action button\n     */\n    positiveButtonText?: string;\n    /**\n     * The text used in the negative action button\n     */\n    negativeButtonText?: string;\n    /**\n     * The callback invoked when a new date or time is selected\n     */\n    onConfirm?: (date: Date) => void;\n    /**\n     * The callback invoked when an error occured while selecting a new value\n     */\n    onError?: (error: unknown) => void;\n  }\n>;\n\nexport interface DatePickerOptions extends BaseProps {\n  /**\n   * The mode of picker to show. Can be either `AndroidPickerMode.DATE` or `AndroidPickerMode.TIME`.\n   */\n  mode?: AndroidPickerMode.DATE;\n  /**\n   * The minimum date allowed to be selected\n   */\n  minimumDate?: Date;\n  /**\n   * The maximum date allowed to be selected\n   */\n  maximumDate?: Date;\n  /**\n   * The start date when using a date range picker\n   */\n  startDate?: Date;\n  /**\n   * The end date when using a date range picker\n   */\n  endDate?: Date;\n  is24Hours?: never;\n  /**\n   * The input mode to launch the date picker in\n   */\n  inputMode?: AndroidDateInputMode;\n  /**\n   * Whether to show the date picker in fullscreen mode\n   */\n  fullscreen?: boolean;\n  /**\n   * The type of date picker to launch. Can be either `AndroidDatePickerType.DEFAULT`\n   * for the regular date picker or `AndroidDatePickerType.RANGE` for the date range picker\n   */\n  type?: AndroidDatePickerType;\n  /**\n   * The callback invoked when a date range is selected\n   */\n  onConfirmDateRange?: (startDate: Date, endDate: Date) => void;\n}\n\nexport interface TimePickerOptions extends BaseProps {\n  /**\n   * The mode of picker to show. Can be either `AndroidPickerMode.DATE` or `AndroidPickerMode.TIME`.\n   */\n  mode?: AndroidPickerMode.TIME;\n  minimumDate?: never;\n  maximumDate?: never;\n  startDate?: never;\n  endDate?: never;\n  /**\n   * The time format to launch the time picker in\n   */\n  is24Hour?: boolean;\n  /**\n   * The input mode to launch the time picker in\n   */\n  inputMode?: AndroidTimeInputMode;\n  type?: never;\n  onConfirmDateRange?: never;\n}\n\nexport type AndroidPickerProps = DatePickerOptions | TimePickerOptions;\n\nexport type DateTimePickerResult = Readonly<{\n  action: ActionType;\n  year: number;\n  month: number;\n  day: number;\n  startYear: number;\n  startMonth: number;\n  startDay: number;\n  endYear: number;\n  endMonth: number;\n  endDay: number;\n  hour: number;\n  minute: number;\n}>;\n"],"mappings":"AAEA,WAAYA,iBAAZ;;WAAYA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;AAKZ,WAAYC,oBAAZ;;WAAYA,oB;EAAAA,oB;EAAAA,oB;EAAAA,oB;GAAAA,oB,KAAAA,oB;;AAMZ,WAAYC,oBAAZ;;WAAYA,oB;EAAAA,oB;EAAAA,oB;EAAAA,oB;GAAAA,oB,KAAAA,oB;;AAMZ,WAAYC,qBAAZ;;WAAYA,qB;EAAAA,qB;EAAAA,qB;GAAAA,qB,KAAAA,qB;;AAKZ,WAAYC,UAAZ;;WAAYA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;EAAAA,U,CAAAA,U;GAAAA,U,KAAAA,U"}