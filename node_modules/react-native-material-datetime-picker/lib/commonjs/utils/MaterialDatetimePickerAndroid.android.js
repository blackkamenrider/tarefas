"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MaterialDatetimePickerAndroid = void 0;

var _picker = _interopRequireDefault(require("../picker"));

var _types = require("../types");

var _android = require("./android");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const show = props => {
  const {
    mode = _types.AndroidPickerMode.DATE,
    value,
    onConfirm,
    onConfirmDateRange,
    onError
  } = props;
  const picker = (0, _android.getPicker)(mode);

  (async () => {
    try {
      const {
        action,
        day,
        month,
        year,
        startDay,
        startMonth,
        startYear,
        endDay,
        endMonth,
        endYear,
        minute,
        hour
      } = await picker(props);

      switch (action) {
        case _types.ActionType.SET_DATE:
          {
            const date = new Date(value);
            date.setFullYear(year, month, day);
            onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(date);
            break;
          }

        case _types.ActionType.SET_DATE_RANGE:
          {
            const startDate = new Date(value);
            const endDate = new Date(value);
            startDate.setFullYear(startYear, startMonth, startDay);
            endDate.setFullYear(endYear, endMonth, endDay);
            onConfirmDateRange === null || onConfirmDateRange === void 0 ? void 0 : onConfirmDateRange(startDate, endDate);
            break;
          }

        case _types.ActionType.SET_TIME:
          {
            const time = new Date(value);
            time.setHours(hour, minute);
            onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(time);
            break;
          }

        case _types.ActionType.DISMISSED:
        default:
          {
            onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm(new Date(value));
          }
      }
    } catch (err) {
      onError === null || onError === void 0 ? void 0 : onError(err);
    }
  })();
};

const dismiss = mode => {
  if (mode) {
    return _picker.default[mode].dismiss();
  }

  return _picker.default.date.dismiss() || _picker.default.time.dismiss();
};

const MaterialDatetimePickerAndroid = {
  show,
  dismiss
};
exports.MaterialDatetimePickerAndroid = MaterialDatetimePickerAndroid;
//# sourceMappingURL=MaterialDatetimePickerAndroid.android.js.map